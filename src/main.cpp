#include <cerrno>
#include <chrono>
#include <fstream>
#include <iomanip>

#include "include/Contour.hpp"
#include "include/GFileRawData.hpp"
#include "include/Spdata.hpp"

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

int main(int argc, char** argv) {
    using namespace std::chrono;

    auto t_start = high_resolution_clock::now();

    if (argc == 1) {
        std::cerr << "Please provide gfile path.\n";
        return ENOENT;
    }

    std::string filename{argv[1]};
    std::ifstream g_file(filename);
    if (!g_file.is_open()) {
        std::cerr << "Can not open g-file.\n";
        return ENOENT;
    }

    GFileRawData g_file_data;
    g_file >> g_file_data;
    if (!g_file_data.is_complete()) { return EPERM; }
    g_file.close();

    auto t_after_read_file = high_resolution_clock::now();

    constexpr std::size_t RADIAL_GRID_COUNT = 129;
    constexpr std::size_t POLOIDAL_GRID_COUNT = 255;

    Spdata spdata(g_file_data, RADIAL_GRID_COUNT, POLOIDAL_GRID_COUNT);

    auto t_after_spdata = high_resolution_clock::now();

    std::string output_path{};
    if (argc == 2) {
        output_path = filename;
        output_path.resize(output_path.find_last_of('/'));
    } else {
        output_path = argv[2];
    }
    std::ofstream output(output_path + "/spdata.dat", std::ios::out);
    output << "Generated by MCT, from " << filename << '\n';
    output << spdata;

    auto t_after_output = high_resolution_clock::now();

    std::cout << "Read g-file: "
              << duration<double, milliseconds::period>(t_after_read_file -
                                                        t_start)
                     .count()
              << "ms\n";
    std::cout << "Generate BSpline: "
              << duration<double, milliseconds::period>(t_after_spdata -
                                                        t_after_read_file)
                     .count()
              << "ms\n";
    std::cout << "Write to spdata "
              << duration<double, milliseconds::period>(t_after_output -
                                                        t_after_spdata)
                     .count()
              << "ms\n";

    return 0;
}
